import streamlit as st
import pandas as pd
from io import BytesIO
import streamlit_authenticator as stauth

# ---------- FELHASZN√ÅL√ìK ----------
credentials = {
    "usernames": {
        "peter": {
            "name": "Kiss P√©ter",
            "password": "jelszo123"   # lehet hash-elt jelsz√≥ is
        },
        "anna": {
            "name": "Nagy Anna",
            "password": "titok456"
        }
    }
}

# ---------- AUTHENTIK√ÅCI√ì ----------
authenticator = stauth.Authenticate(
    credentials,
    cookie_name="rendelesi_app_cookie",
    key="random_key",
    cookie_expiry_days=1
)

# Login panel (helyes h√≠v√°s: location="main")
name, authentication_status, username = authenticator.login("Bel√©p√©s", location="main")

# ---------- LOGIN KEZEL√âS ----------
if authentication_status == False:
    st.error("‚ùå Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥")

elif authentication_status == None:
    st.warning("üîë K√©rlek jelentkezz be!")

elif authentication_status:
    st.success(f"Szia, {name}! ‚úÖ")
    authenticator.logout("Kijelentkez√©s", location="sidebar")

    # ---------- ADATOK BET√ñLT√âSE ----------
    @st.cache_data
    def load_data():
        url = "https://docs.google.com/spreadsheets/d/16jmXCMm3TFyZThIulyr21TFGVMMQoU1YtRxlUkvkfr4/export?format=csv&gid=0"
        df = pd.read_csv(url)

        # √Årat sz√°mm√° alak√≠tjuk √©s p√©nzform√°tumba tessz√ºk
        df["√°r"] = pd.to_numeric(df["√°r"], errors="coerce")
        df["√°r_fmt"] = df["√°r"].apply(lambda x: f"{x:,.2f} RON" if pd.notnull(x) else "")

        # Kijelz√©shez n√©v + √°r
        df["display"] = df["n√©v"] + " ‚Äì " + df["√°r_fmt"]
        return df

    df = load_data()

    # ---------- FEL√úLET ----------
    st.title("üì¶ Online rendel√©si fel√ºlet")
    st.write(f"Bejelentkezve: **{name}**")

    if "cart" not in st.session_state:
        st.session_state["cart"] = []

    # Keres√©s sz√≥rendf√ºggetlen√ºl csak n√©v alapj√°n
    search_text = st.text_input("üîç Keres√©s a n√©v mez≈ëben (sz√≥rend mindegy):")
    if search_text:
        words = search_text.lower().split()
        def match(n):
            return all(word in str(n).lower() for word in words)
        filtered = df[df["n√©v"].apply(match)]
    else:
        filtered = df

    # Term√©kv√°laszt√≥
    if not filtered.empty:
        choice = st.selectbox(
            "V√°lassz term√©ket:",
            options=filtered["display"].unique(),
            index=None,
            placeholder="Kezdj el g√©pelni..."
        )
        if choice:
            product = df[df["display"] == choice].iloc[0]
        else:
            product = None
    else:
        product = None
        st.warning("Nincs tal√°lat.")

    qty = st.number_input("Mennyis√©g:", min_value=1, value=1)

    if st.button("‚ûï Kos√°rba") and product is not None:
        selected = product.to_dict()
        selected["rendelt_mennyis√©g"] = qty
        selected["r√©sz√∂sszeg"] = selected["√°r"] * qty
        st.session_state["cart"].append(selected)
        st.success(f"{product['n√©v']} hozz√°adva a kos√°rhoz!")

    # ---------- KOS√ÅR ----------
    if st.session_state["cart"]:
        st.write("### üõí Kos√°r tartalma (szerkeszthet≈ë)")
        cart_df = pd.DataFrame(st.session_state["cart"])

        cart_df["√°r"] = pd.to_numeric(cart_df["√°r"], errors="coerce")
        cart_df["rendelt_mennyis√©g"] = pd.to_numeric(cart_df["rendelt_mennyis√©g"], errors="coerce").fillna(0).astype(int)
        cart_df["r√©sz√∂sszeg"] = cart_df["√°r"] * cart_df["rendelt_mennyis√©g"]

        cart_df["√°r_fmt"] = cart_df["√°r"].apply(lambda x: f"{x:,.2f} RON" if pd.notnull(x) else "")
        cart_df["r√©sz√∂sszeg_fmt"] = cart_df["r√©sz√∂sszeg"].apply(lambda x: f"{x:,.2f} RON" if pd.notnull(x) else "")

        edited_cart = st.data_editor(
            cart_df[["n√©v", "√°r_fmt", "rendelt_mennyis√©g", "r√©sz√∂sszeg_fmt"]],
            num_rows="dynamic",
            use_container_width=True,
            disabled=["n√©v", "√°r_fmt", "r√©sz√∂sszeg_fmt"],
            key="cart_editor"
        )

        st.session_state["cart"] = cart_df.to_dict(orient="records")

        total = float(cart_df["r√©sz√∂sszeg"].sum())
        st.markdown(f"### üí∞ V√©g√∂sszeg: **{total:,.2f} RON**")

        # Export√°l√°s
        csv = cart_df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è Let√∂lt√©s CSV", csv, "rendeles.csv", "text/csv")

        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            cart_df.to_excel(writer, index=False, sheet_name="Rendeles")
        st.download_button("‚¨áÔ∏è Let√∂lt√©s Excel (XLSX)", output.getvalue(), "rendeles.xlsx")
