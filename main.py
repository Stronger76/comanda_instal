import streamlit as st
import pandas as pd
from io import BytesIO
from streamlit_oauth import OAuth2Component

# ---------- GOOGLE LOGIN BE√ÅLL√çT√ÅSOK ----------
CLIENT_ID = "IDE_√çRD_BE_A_CLIENT_ID-T"
CLIENT_SECRET = "IDE_√çRD_BE_A_CLIENT_SECRET-T"
REDIRECT_URI = "https://SAJAT-APPOD.streamlit.app"  # vagy http://localhost:8501 tesztel√©shez

AUTHORIZE_ENDPOINT = "https://accounts.google.com/o/oauth2/v2/auth"
TOKEN_ENDPOINT = "https://oauth2.googleapis.com/token"
REVOKE_ENDPOINT = "https://oauth2.googleapis.com/revoke"
SCOPE = "openid email profile"

oauth2 = OAuth2Component(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    authorize_endpoint=AUTHORIZE_ENDPOINT,
    token_endpoint=TOKEN_ENDPOINT,
    revoke_endpoint=REVOKE_ENDPOINT,
    redirect_uri=REDIRECT_URI,
    scope=SCOPE
)

# ---------- ADATOK BET√ñLT√âSE ----------
@st.cache_data
def load_data():
    url = "https://docs.google.com/spreadsheets/d/16jmXCMm3TFyZThIulyr21TFGVMMQoU1YtRxlUkvkfr4/export?format=csv&gid=0"
    df = pd.read_csv(url)

    # √Årat sz√°mm√° alak√≠tjuk √©s p√©nzform√°tumba tessz√ºk
    df["√°r"] = pd.to_numeric(df["√°r"], errors="coerce")
    df["√°r_fmt"] = df["√°r"].apply(lambda x: f"{x:,.2f} RON" if pd.notnull(x) else "")

    # Kijelz√©shez n√©v + √°r
    df["display"] = df["n√©v"] + " ‚Äì " + df["√°r_fmt"]
    return df

df = load_data()

# ---------- LOGIN FEL√úLET ----------
if "user" not in st.session_state:
    st.title("üîê Jelentkezz be a Google fi√≥koddal")
    result = oauth2.authorize_button("Google bejelentkez√©s")
    if result:
        user_info = result.get("userinfo")
        if user_info:
            st.session_state["user"] = user_info["email"]
            st.success(f"Sikeres bejelentkez√©s: {st.session_state['user']}")
            st.experimental_rerun()
    st.stop()

# ---------- APP FEL√úLET (BEL√âP√âS UT√ÅN) ----------
st.title("üì¶ Online rendel√©si fel√ºlet")
st.write(f"Bejelentkezve: **{st.session_state['user']}**")

# Kos√°r inicializ√°l√°sa
if "cart" not in st.session_state:
    st.session_state["cart"] = []

# Keres√©s sz√≥rendf√ºggetlen√ºl csak a 'n√©v' oszlopban
search_text = st.text_input("üîç Keres√©s a n√©v mez≈ëben (sz√≥rend mindegy):")
if search_text:
    words = search_text.lower().split()

    def match(name):
        return all(word in str(name).lower() for word in words)

    filtered = df[df["n√©v"].apply(match)]
else:
    filtered = df

# Term√©kv√°laszt√≥ (n√©v + √°r kijelz√©ssel)
if not filtered.empty:
    choice = st.selectbox(
        "V√°lassz term√©ket:",
        options=filtered["display"].unique(),
        index=None,
        placeholder="Kezdj el g√©pelni..."
    )
    if choice:
        product = df[df["display"] == choice].iloc[0]
    else:
        product = None
else:
    product = None
    st.warning("Nincs tal√°lat.")

# Mennyis√©g
qty = st.number_input("Mennyis√©g:", min_value=1, value=1)

# Hozz√°ad√°s kos√°rhoz
if st.button("‚ûï Kos√°rba") and product is not None:
    selected = product.to_dict()
    selected["rendelt_mennyis√©g"] = qty
    selected["r√©sz√∂sszeg"] = selected["√°r"] * qty
    st.session_state["cart"].append(selected)
    st.success(f"{product['n√©v']} hozz√°adva a kos√°rhoz!")

# ---------- KOS√ÅR ----------
if st.session_state["cart"]:
    st.write("### üõí Kos√°r tartalma (szerkeszthet≈ë)")
    cart_df = pd.DataFrame(st.session_state["cart"])

    # Biztos√≠tjuk, hogy sz√°mk√©nt legyenek kezelve
    cart_df["√°r"] = pd.to_numeric(cart_df["√°r"], errors="coerce")
    cart_df["rendelt_mennyis√©g"] = pd.to_numeric(cart_df["rendelt_mennyis√©g"], errors="coerce").fillna(0).astype(int)
    cart_df["r√©sz√∂sszeg"] = cart_df["√°r"] * cart_df["rendelt_mennyis√©g"]

    # Form√°zott oszlopok
    cart_df["√°r_fmt"] = cart_df["√°r"].apply(lambda x: f"{x:,.2f} RON" if pd.notnull(x) else "")
    cart_df["r√©sz√∂sszeg_fmt"] = cart_df["r√©sz√∂sszeg"].apply(lambda x: f"{x:,.2f} RON" if pd.notnull(x) else "")

    # Megjelen√≠t√©s (csak mennyis√©g szerkeszthet≈ë)
    edited_cart = st.data_editor(
        cart_df[["n√©v", "√°r_fmt", "rendelt_mennyis√©g", "r√©sz√∂sszeg_fmt"]],
        num_rows="dynamic",
        use_container_width=True,
        disabled=["n√©v", "√°r_fmt", "r√©sz√∂sszeg_fmt"],
        key="cart_editor"
    )

    # Friss√≠tett kos√°r vissza√≠r√°sa
    st.session_state["cart"] = cart_df.to_dict(orient="records")

    # Teljes v√©g√∂sszeg
    total = float(cart_df["r√©sz√∂sszeg"].sum())
    st.markdown(f"### üí∞ V√©g√∂sszeg: **{total:,.2f} RON**")

    # Export gombok
    csv = cart_df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Let√∂lt√©s CSV", csv, "rendeles.csv", "text/csv")

    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        cart_df.to_excel(writer, index=False, sheet_name="Rendeles")
    st.download_button("‚¨áÔ∏è Let√∂lt√©s Excel (XLSX)", output.getvalue(), "rendeles.xlsx")
